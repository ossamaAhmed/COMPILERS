### Starting build.
# Target: mini.ml.depends, tags: { extension:ml, file:mini.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules mini.ml > mini.ml.depends # cached
# Target: error.ml.depends, tags: { extension:ml, file:error.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules error.ml > error.ml.depends # cached
# Target: error.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:error.cmo, file:error.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o error.cmo error.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/usr/local/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --explain --raw-depend --ocamldep '/usr/local/bin/ocamldep.opt -modules' parser.mly > parser.mly.depends
# Target: parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --explain --ocamlc /usr/local/bin/ocamlc.opt --infer parser.mly
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o lexer.cmo lexer.ml # cached
# Target: mini.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:mini.cmo, file:mini.ml, implem, ocaml, quiet }
/usr/local/bin/ocamlc.opt -c -o mini.cmo mini.ml # cached
# Target: error.cmx, tags: { compile, extension:cmx, extension:ml, file:error.cmx, file:error.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -o error.cmx error.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
/usr/local/bin/ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -o lexer.cmx lexer.ml # cached
# Target: mini.cmx, tags: { compile, extension:cmx, extension:ml, file:mini.cmx, file:mini.ml, implem, native, ocaml, quiet }
/usr/local/bin/ocamlopt.opt -c -o mini.cmx mini.ml # cached
# Target: mini.native, tags: { dont_link_with, extension:native, file:mini.native, link, native, ocaml, program, quiet }
/usr/local/bin/ocamlopt.opt error.cmx parser.cmx lexer.cmx mini.cmx -o mini.native
# Compilation successful.
